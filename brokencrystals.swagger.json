{
    "openapi": "3.0.0",
    "paths": {
      "/api/render": {
        "post": {
          "description": "Template for rendering by doT. Expects plain text as request body",
          "operationId": "AppController_renderTemplate",
          "parameters": [],
          "requestBody": {
            "required": true,
            "description": "Write your text here",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Rendered result"
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/goto": {
        "get": {
          "description": "Redirects the user to the provided url",
          "operationId": "AppController_redirect",
          "parameters": [
            {
              "name": "url",
              "required": true,
              "in": "query",
              "schema": {
                "example": "https://google.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Redirected"
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/metadata": {
        "post": {
          "description": "Receives client's metadata in XML format. Returns the passed XML",
          "operationId": "AppController_xml",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "xml_doc": {
                    "summary": "XML doc",
                    "value": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 915 585\"><g stroke-width=\"3.45\" fill=\"none\"><path stroke=\"#000\" d=\"M11.8 11.8h411v411l-411 .01v-411z\"/><path stroke=\"#448\" d=\"M489 11.7h415v411H489v-411z\"/></g></svg>"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "XML passed successfully"
            },
            "500": {
              "description": "Invalid data"
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api": {
        "options": {
          "description": "Returns the list of supported operations",
          "operationId": "AppController_getTestOptions",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/spawn": {
        "get": {
          "description": "Launches system command on server",
          "operationId": "AppController_getCommandResult",
          "parameters": [
            {
              "name": "command",
              "required": true,
              "in": "query",
              "schema": {
                "example": "ls -la",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/config": {
        "get": {
          "description": "Returns server configuration to the client",
          "operationId": "AppController_getConfig",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppConfig"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/secrets": {
        "get": {
          "description": "Returns server secrets. Shhhh ðŸ¤«",
          "operationId": "AppController_getSecrets",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/v1/userinfo/{email}": {
        "get": {
          "description": "Returns user info by email",
          "operationId": "AppController_getUserInfo",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns basic user info if it exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/v2/userinfo/{email}": {
        "get": {
          "description": "Returns user info by email",
          "operationId": "AppController_getUserInfoV2",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns basic user info if it exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/nestedJson": {
        "get": {
          "description": "Returns a nested JSON response with configurable depth",
          "operationId": "AppController_getNestedJson",
          "parameters": [
            {
              "name": "depth",
              "required": true,
              "in": "query",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "App controller"
          ]
        }
      },
      "/api/auth/admin/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with RSA256 protocol. The key is siigned with RSA private key.",
          "operationId": "AuthController_loginWithRSAJwtKeysAdmin",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with RSA256 protocol. The key is siigned with RSA private key.",
          "operationId": "AuthController_loginWithRSAJwtKeys",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/rsa/signature/validate": {
        "get": {
          "description": "Vulnerability case: The signature is not checked, he/she can access to victims sensitive information by manipulation JWT, authentication is bypassed.",
          "operationId": "AuthController_validateWithRSASignatureJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/dom-csrf-flow": {
        "get": {
          "description": "Authenticates user and returns DOM CSRF token.",
          "operationId": "AuthController_getDomCsrfToken",
          "parameters": [],
          "responses": {
            "400": {
              "description": "Bad request, fingerprint is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/simple-csrf-flow": {
        "get": {
          "description": "Returns Simple CSRF token.",
          "operationId": "AuthController_getCsrfToken",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns simple csrf token"
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/oidc-client": {
        "get": {
          "description": "Get OIDC client configuration. Returns public OIDC. These keys are configurable via CLIENT_ID, CLIENT_SECRET env variables.",
          "operationId": "AuthController_getOidcClient",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OidcClientResponse"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/kid-sql/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HCA256. The key id is provided in KID protocol.",
          "operationId": "AuthController_loginWithKIDSqlJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/kid-sql/validate": {
        "get": {
          "description": "Validates the JWT header and returns secret if the header is valid. Executes SQL query by concatenating the KID value with the query.\n    In case of None algorithm ignores the signature.",
          "operationId": "AuthController_validateWithKIDSqlJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/weak-key/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HCA256. The key is configurable on server via the JWT_SECRET_KEY env variable.",
          "operationId": "AuthController_loginWithWeakKeyJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/weak-key/validate": {
        "get": {
          "description": "Validates the JWT header and return secret if the header is valid. The token validation is done using algorithm in header and key\n    that is configured in JWT_SECRET_KEY env variable. In case of None algorithm ignores the signature.",
          "operationId": "AuthController_validateWithWeakKeyJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/jku/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HCA256. The key is configurable on server via the JWT_SECRET_KEY env variable.",
          "operationId": "AuthController_loginWithJKUJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/jku/validate": {
        "get": {
          "description": "Vulnerability case: Uses publicly available JSON to check if JWT is properly signed after the Header in JWT is set to point to our JSON and sign the JWT with our private key.",
          "operationId": "AuthController_validateWithJKUJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/jwk/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HCA256. The key is configurable on server via JWT_SECRET_KEY env variable.",
          "operationId": "AuthController_loginWithJWKJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/jwk/validate": {
        "get": {
          "description": "Vulrenability case: JWK field JSON in Header has empty values and our private key to sign the JWT",
          "operationId": "AuthController_validateWithJWKJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/x5c/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HCA256. The key is configurable on server via the JWT_SECRET_KEY env variable.",
          "operationId": "AuthController_loginWithX5CJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/x5c/validate": {
        "get": {
          "description": "Vulnerability case: The application doesnâ€™t properly check which X5C key is used for signing and when X5C headers are set to our values and signed with our private key, authentication is bypassed.",
          "operationId": "AuthController_validateWithX5CJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/x5u/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HCA256. The key is configurable on server via the JWT_SECRET_KEY env variable.",
          "operationId": "AuthController_loginWithX5UJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/x5u/validate": {
        "get": {
          "description": "Vulnerability case: Uses the uploaded certificate to sign the JWT and sets the X5U Header in JWT to point to the uploaded certificate.",
          "operationId": "AuthController_validateWithX5UJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/hmac/login": {
        "post": {
          "description": "Authenticates user and returns JWT token with HS256. The key is configurable on server via the JWT_SECRET_KEY env variable.",
          "operationId": "AuthController_loginWithHMACJwt",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginJwtResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/auth/jwt/hmac/validate": {
        "get": {
          "description": "Vulnerability case: When attacked exploiting JWT token he/she can access to victims sensitive information by manipulation JWT, authentication is bypassed.",
          "operationId": "AuthController_validateWithHMACJwt",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JwtValidationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Auth controller"
          ]
        }
      },
      "/api/users": {
        "options": {
          "description": "List of permitted communication options",
          "operationId": "UsersController_getTestOptions",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/one/{email}": {
        "get": {
          "description": "Returns user info by email",
          "operationId": "UsersController_getByEmail",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns basic user info if it exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/id/{id}": {
        "get": {
          "description": "Returns user info by email",
          "operationId": "UsersController_getById",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "schema": {
                "example": 1,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns basic user info if it exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/fullinfo/{email}": {
        "get": {
          "description": "Returns full user info by email",
          "operationId": "UsersController_getFullUserInfo",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns full user info if it exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/search/{name}": {
        "get": {
          "description": "Returns users info contains searched substring in firstName",
          "operationId": "UsersController_searchByName",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns users info contains searched substring in firstName",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/one/{email}/photo": {
        "get": {
          "description": "Returns user profile photo",
          "operationId": "UsersController_getUserPhoto",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns user profile photo"
            },
            "204": {
              "description": "Returns empty content if photo is not set"
            },
            "403": {
              "description": "Returns then user is not authenticated"
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        },
        "put": {
          "description": "Uploads user profile photo",
          "operationId": "UsersController_uploadFile",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Photo updated"
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/one/{id}/photo": {
        "delete": {
          "description": "Deletes user profile photo by user's ID",
          "operationId": "UsersController_deleteUserPhotoById",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "schema": {
                "example": 1,
                "type": "number"
              }
            },
            {
              "name": "isAdmin",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Deletes user profile photo"
            },
            "204": {
              "description": "Returns empty content if there was no user profile photo"
            },
            "401": {
              "description": "Returns when isAdmin is false"
            },
            "403": {
              "description": "Returns when user is not authenticated"
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/ldap": {
        "get": {
          "description": "Performs LDAP search for user details",
          "operationId": "UsersController_ldapQuery",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "in": "query",
              "schema": {
                "example": "(&(objectClass=person)(objectClass=user)(email=john.doe@example.com))",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserDto"
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/basic": {
        "post": {
          "description": "Creates BASIC user in PostGreSQL db",
          "operationId": "UsersController_createUser",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "409": {
              "description": "User Already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/oidc": {
        "post": {
          "description": "Creates OIDC user in KeyCloak db",
          "operationId": "UsersController_createOIDCUser",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User created, returns empty object"
            },
            "409": {
              "description": "User Already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "errorMessage": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/one/{email}/info": {
        "put": {
          "description": "Method for updating user details. Vulnerability case: Mass Assignment allows an attacker to modify object properties, which are not supposed to be changed by the user",
          "operationId": "UsersController_changeUserInfo",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns updated user"
            },
            "403": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        },
        "get": {
          "description": "Returns user info by email",
          "operationId": "UsersController_getUserInfo",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns user info"
            },
            "403": {
              "description": "invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/users/one/{email}/adminpermission": {
        "get": {
          "description": "Endpoint for checking admin rights of authenticated user",
          "operationId": "UsersController_getAdminStatus",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns true if user has admin rights"
            },
            "403": {
              "description": "user has no admin rights",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "User controller"
          ]
        }
      },
      "/api/file": {
        "get": {
          "description": "Reads the file from the provided path and the supplied content type and returns the file",
          "operationId": "FileController_loadFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/amethyst.jpg",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "schema": {
                "example": "image/jpg",
                "type": "string"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File read successfully"
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        },
        "delete": {
          "description": "Deletes file at the given path",
          "operationId": "FileController_deleteFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/some_file.jpg",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File deleted successfully"
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        }
      },
      "/api/file/google": {
        "get": {
          "description": "Reads the file from the provided path and the supplied content type and returns the file",
          "operationId": "FileController_loadGoogleFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/amethyst.jpg",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "schema": {
                "example": "image/jpg",
                "type": "string"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File read successfully"
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        }
      },
      "/api/file/aws": {
        "get": {
          "description": "Reads the file from the provided path and the supplied content type and returns the file",
          "operationId": "FileController_loadAwsFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/amethyst.jpg",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "schema": {
                "example": "image/jpg",
                "type": "string"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File read successfully"
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        }
      },
      "/api/file/azure": {
        "get": {
          "description": "Reads the file from the provided path and the supplied content type and returns the file",
          "operationId": "FileController_loadAzureFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/amethyst.jpg",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "schema": {
                "example": "image/jpg",
                "type": "string"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File read successfully"
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        }
      },
      "/api/file/digital_ocean": {
        "get": {
          "description": "Reads the file from the provided path and the supplied content type and returns the file",
          "operationId": "FileController_loadDigitalOceanFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/amethyst.jpg",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "schema": {
                "example": "image/jpg",
                "type": "string"
              }
            },
            {
              "name": "accept",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File read successfully"
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        }
      },
      "/api/file/raw": {
        "put": {
          "description": "Save raw content on server as a file",
          "operationId": "FileController_uploadFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "some/path/to/file.png",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        },
        "get": {
          "description": "Read file content on server as a file",
          "operationId": "FileController_readFile",
          "parameters": [
            {
              "name": "path",
              "required": true,
              "in": "query",
              "schema": {
                "example": "config/products/crystals/amethyst.jpg",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns requested file"
            },
            "404": {
              "description": "File not found"
            }
          },
          "summary": "",
          "tags": [
            "Files controller"
          ]
        }
      },
      "/api/subscriptions": {
        "post": {
          "description": "Creates subscription for provided email and returns the email address",
          "operationId": "SubscriptionsController_subscribe",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "query",
              "schema": {
                "example": "john.doe@example.com",
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Returns subscribed email"
            }
          },
          "summary": "",
          "tags": [
            "Subscriptions controller"
          ]
        }
      },
      "/api/testimonials": {
        "post": {
          "description": "Creates testimonial",
          "operationId": "TestimonialsController_createTestimonial",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestimonialDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestimonialDto"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Testimonials controller"
          ]
        },
        "get": {
          "description": "Returns all testimonials",
          "operationId": "TestimonialsController_getTestimonials",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TestimonialDto"
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Testimonials controller"
          ]
        }
      },
      "/api/testimonials/count": {
        "get": {
          "description": "Returns count of all testimonials based on provided sql query",
          "operationId": "TestimonialsController_getCount",
          "parameters": [
            {
              "name": "query",
              "required": true,
              "in": "query",
              "schema": {
                "example": "select count(*) as count from testimonial",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Testimonials controller"
          ]
        }
      },
      "/api/products": {
        "get": {
          "description": "Returns all products",
          "operationId": "ProductsController_getProducts",
          "parameters": [
            {
              "name": "date_from",
              "required": false,
              "in": "query",
              "schema": {
                "example": "02-05-2001",
                "type": "string"
              }
            },
            {
              "name": "date_to",
              "required": false,
              "in": "query",
              "schema": {
                "example": "02-05-2024",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductDto"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number"
                      },
                      "message": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Products controller"
          ]
        }
      },
      "/api/products/latest": {
        "get": {
          "description": "Returns 3 latest products",
          "operationId": "ProductsController_getLatestProducts",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "example": 3,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductDto"
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Products controller"
          ]
        }
      },
      "/api/products/views": {
        "get": {
          "description": "Updates the product's 'viewsCount' according to product name provided in the header 'x-product-name' and returns the query result.",
          "operationId": "ProductsController_viewProduct",
          "parameters": [
            {
              "name": "x-product-name",
              "required": true,
              "in": "header",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Products controller"
          ]
        }
      },
      "/api/partners/query": {
        "get": {
          "description": "Query Broken Crystal's partners using a raw XPATH query",
          "operationId": "PartnersController_queryPartnersRaw",
          "parameters": [
            {
              "name": "xpath",
              "required": true,
              "in": "query",
              "schema": {
                "example": "/partners/partner/name",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Partners controller"
          ]
        }
      },
      "/api/partners/partnerLogin": {
        "get": {
          "description": "Login as one of Broken Crystal's partners using a username and a password",
          "operationId": "PartnersController_partnerLogin",
          "parameters": [
            {
              "name": "username",
              "required": true,
              "in": "query",
              "schema": {
                "example": "walter100",
                "type": "string"
              }
            },
            {
              "name": "password",
              "required": true,
              "in": "query",
              "schema": {
                "example": "Heisenberg123",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Partners controller"
          ]
        }
      },
      "/api/partners/searchPartners": {
        "get": {
          "description": "Search Broken Crystal's partners' names using a keyword",
          "operationId": "PartnersController_searchPartners",
          "parameters": [
            {
              "name": "keyword",
              "required": true,
              "in": "query",
              "schema": {
                "example": "Walter",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Partners controller"
          ]
        }
      },
      "/api/email/sendSupportEmail": {
        "get": {
          "description": "Send a mail from 'no-reply@brokencrystals.com' to any other email",
          "operationId": "EmailController_sendSupportEmail",
          "parameters": [
            {
              "name": "name",
              "required": true,
              "in": "query",
              "schema": {
                "example": "Bob Dylan",
                "type": "string"
              }
            },
            {
              "name": "to",
              "required": true,
              "in": "query",
              "schema": {
                "example": "username@email.com",
                "type": "string"
              }
            },
            {
              "name": "subject",
              "required": true,
              "in": "query",
              "schema": {
                "example": "Help Request",
                "type": "string"
              }
            },
            {
              "name": "content",
              "required": true,
              "in": "query",
              "schema": {
                "example": "I would like to request help regarding..",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "Emails controller"
          ]
        }
      },
      "/api/email/getEmails": {
        "get": {
          "description": "Get all emails on the mail server as a JSON response",
          "operationId": "EmailController_getEmails",
          "parameters": [
            {
              "name": "withSource",
              "required": true,
              "in": "query",
              "schema": {
                "example": "true",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "Emails controller"
          ]
        }
      },
      "/api/email/deleteEmails": {
        "delete": {
          "description": "Deletes all the emails on the mail server",
          "operationId": "EmailController_deleteEmails",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "",
          "tags": [
            "Emails controller"
          ]
        }
      },
      "/api/chat/query": {
        "post": {
          "description": "Send a prompt to chat to get an answer",
          "operationId": "ChatController_query",
          "parameters": [],
          "requestBody": {
            "required": true,
            "description": "A list of messages comprising the conversation so far",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Chatbot answer",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "summary": "",
          "tags": [
            "Chat controller"
          ]
        }
      }
    },
    "info": {
      "title": "Broken Crystals",
      "description": "\n  ![BC logo](/assets/img/logo_blue_small.png)\n\n  This is the _Broken Crystals_ REST API.\n\n  _Broken Crystals_ is a benchmark application that uses modern technologies and implements a set of common security vulnerabilities.\n\n  ## Available endpoints\n\n  * [App](#/App%20controller) - common operations\n\n  * [Auth](#/Auth%20controller) - operations with authentication methods\n\n  * [User](#/User%20controller) - operations with users(creation, searching)\n\n  * [Files](#/Files%20controller) - operations with files\n\n  * [Subscriptions](#/Subscriptions%20controller) - operations with subscriptions\n\n  * [Testimonials](#/Testimonials%20controller) - operations with testimonials\n\n  * [Products](#/Products%20controller) â€” operations with products\n\n  * [Partners](#/Partners%20controller) â€” operations with partners\n\n  * [Emails](#/Emails%20controller) â€” operations with emails\n  \n  * [Chat](#/Chat%20controller) â€” operations with chat\n\n\n  ",
      "version": "1.0",
      "contact": {}
    },
    "tags": [],
    "servers": [
      {
        "url": "https://brokencrystals.com"
      }
    ],
    "components": {
      "schemas": {
        "AppConfig": {
          "type": "object",
          "properties": {
            "awsBucket": {
              "type": "string"
            },
            "sql": {
              "type": "string"
            },
            "googlemaps": {
              "type": "string"
            }
          },
          "required": [
            "awsBucket",
            "sql",
            "googlemaps"
          ]
        },
        "UserDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "john.doe@examle.com"
            },
            "firstName": {
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "example": "Doe"
            },
            "company": {
              "type": "string",
              "example": "Bright Security"
            },
            "id": {
              "type": "number",
              "example": 1
            },
            "cardNumber": {
              "type": "string",
              "example": "4263982640269299"
            },
            "phoneNumber": {
              "type": "string",
              "example": "12065550100"
            },
            "password": {
              "type": "string",
              "example": "Pa55w0rd"
            }
          },
          "required": [
            "email",
            "firstName",
            "lastName",
            "company",
            "id",
            "cardNumber",
            "phoneNumber",
            "password"
          ]
        },
        "LoginRequest": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string",
              "example": "john"
            },
            "password": {
              "type": "string",
              "example": "Pa55w0rd"
            },
            "op": {
              "type": "string",
              "enum": [
                "basic",
                "html",
                "csrf",
                "csrf_dom",
                "oidc"
              ]
            }
          },
          "required": [
            "user",
            "password",
            "op"
          ]
        },
        "LoginResponse": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            },
            "ldapProfileLink": {
              "type": "string",
              "description": "ldap query link for user details"
            }
          },
          "required": [
            "email",
            "ldapProfileLink"
          ]
        },
        "JwtValidationResponse": {
          "type": "object",
          "properties": {
            "secret": {
              "type": "string"
            }
          },
          "required": [
            "secret"
          ]
        },
        "OidcClientResponse": {
          "type": "object",
          "properties": {
            "clientId": {
              "type": "string"
            },
            "clientSecret": {
              "type": "string"
            },
            "metadataUrl": {
              "type": "string"
            }
          },
          "required": [
            "clientId",
            "clientSecret",
            "metadataUrl"
          ]
        },
        "LoginJwtResponse": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "ldapProfileLink": {
              "type": "string",
              "description": "ldap query link for user details"
            }
          },
          "required": [
            "token",
            "email",
            "ldapProfileLink"
          ]
        },
        "CreateUserRequest": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "john.doe@examle.com"
            },
            "firstName": {
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "example": "Doe"
            },
            "company": {
              "type": "string",
              "example": "Bright Security"
            },
            "id": {
              "type": "number",
              "example": 1
            },
            "cardNumber": {
              "type": "string",
              "example": "4263982640269299"
            },
            "phoneNumber": {
              "type": "string",
              "example": "12065550100"
            },
            "password": {
              "type": "string",
              "example": "Pa55w0rd"
            }
          },
          "required": [
            "email",
            "firstName",
            "lastName",
            "company",
            "id",
            "cardNumber",
            "phoneNumber",
            "password"
          ]
        },
        "TestimonialDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "John"
            },
            "title": {
              "type": "string",
              "example": "Doe"
            },
            "message": {
              "type": "string",
              "example": "I've broken all the crystals"
            }
          },
          "required": [
            "name",
            "title",
            "message"
          ]
        },
        "ProductDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Amethyst"
            },
            "category": {
              "type": "string",
              "example": "Healing"
            },
            "photoUrl": {
              "type": "string",
              "default": "/api/file?path=config/products/crystals/amethyst.jpg&type=image/jpg"
            },
            "description": {
              "type": "string",
              "example": "a violet variety of quartz"
            },
            "viewsCount": {
              "type": "number",
              "example": 1
            }
          },
          "required": [
            "name",
            "category",
            "photoUrl",
            "description",
            "viewsCount"
          ]
        },
        "ChatMessage": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "The role of the messages author. Choice between: system, user, or assistant",
              "enum": [
                "user",
                "assistant",
                "system"
              ]
            },
            "content": {
              "type": "string",
              "description": "The contents of the message"
            }
          },
          "required": [
            "role",
            "content"
          ]
        }
      }
    }
  }